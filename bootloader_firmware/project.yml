---

# Notes:
# Sample project C code is not presently written to produce a release artifact.
# As such, release build options are disabled.
# This sample, therefore, only demonstrates running a collection of unit tests.

:project:
  :use_exceptions: FALSE
  :use_test_preprocessor: TRUE
  :use_auxiliary_dependencies: TRUE
  :build_root: build
#  :release_build: TRUE
  :test_file_prefix: test_
  :which_ceedling: gem
  :ceedling_version: 0.31.1
  :default_tasks:
    - test:all
    - gcov:all
    - util:gcov

#:test_build:
#  :use_assembly: TRUE

#:release_build:
#  :output: MyApp.out
#  :use_assembly: FALSE

:environment:

:extension:
  :executable: .out

:paths:
  :test:
    - +:test/**
    - -:test/support
  :source:
    - src/**
    - inc/**
  :support:
    - test/support
  :libraries: []

:defines:
  # in order to add common defines:
  #  1) remove the trailing [] from the :common: section
  #  2) add entries to the :common: section (e.g. :test: has TEST defined)
  :common: &common_defines
    - USE_HAL_DRIVER
    - STM32F103xB
  :test:
    - *common_defines
    - TEST
  :test_preprocess:
    - *common_defines
    - TEST

:cmock:
  :mock_prefix: mock_
  :when_no_prototypes: :warn
  :enforce_strict_ordering: TRUE
  :plugins:
    - :ignore
    - :callback
    - :ignore_arg
    - :expect_any_args
    - :return_thru_ptr
  :treat_as:
    uint8:    HEX8
    uint16:   HEX16
    uint32:   UINT32
    int8:     INT8
    bool:     UINT8
    UINT16:   HEX16
    UINT8_T*: HEX8*
  :when_ptr: :compare_ptr  # This is here due to the opaques in the HAL
  :includes:        # This will add these includes to each mock.
    - <stdbool.h>
    - <stdint.h>
    - <stdio.h>
    - "crc.h"
:flags:
  :test:
    :compile:
      :*:
        - -Wno-packed-bitfield-compat  # Suppress warning about bitfield changes in GCC 4.4
        - -O0
        - -g
        - -DUSE_HAL_DRIVER
        - -DSTM32F103xB
    :link:
      :*:
        - -Wno-packed-bitfield-compat
        - -O0
        - -g
        - -DUSE_HAL_DRIVER
        - -DSTM32F103xB

# Add -gcov to the plugins list to make sure of the gcov plugin
# You will need to have gcov and gcovr both installed to make it work.
# For more information on these options, see docs in plugins/gcov
:gcov:
  :html_report: TRUE
  :html_report_type: detailed
  :reports:
    - HtmlDetailed
    - Text
    - JSON
  :utilities:
    - gcovr           # Use gcovr to create the specified reports (default).
  :gcovr:
    :html_artifact_filename: TestReportHTML
    :report_root: "."
    :html_medium_threshold: 75
    :html_high_threshold: 90
    :print_summary: true

#:tools:
# Ceedling defaults to using gcc for compiling, linking, etc.
# As [:tools] is blank, gcc will be used (so long as it's in your system path)
# See documentation to configure a given toolchain for use

# LIBRARIES
# These libraries are automatically injected into the build process. Those specified as
# common will be used in all types of builds. Otherwise, libraries can be injected in just
# tests or releases. These options are MERGED with the options in supplemental yaml files.
:libraries:
  :placement: :end
  :flag: "-l${1}"
  :path_flag: "-L ${1}"
  :system: []    # for example, you might list 'm' to grab the math library
  :test: []
  :release: []

:plugins:
  :load_paths:
    - "#{Ceedling.load_path}"
  :enabled:
    - stdout_pretty_tests_report
    - module_generator
    - gcov
...
